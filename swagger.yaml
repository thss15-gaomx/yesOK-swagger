swagger: '2.0'
info:
  description: |
    This is the API doc for YesOK.
  version: 1.0.0
  title: YesOK
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: event
  description: Operation about events
- name: user
  description: Operations about user
- name: events
  description: Get events list
# schemes:
# - http
paths:
  /event:
    post:
      tags:
      - event
      summary: Create a new event
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Event object that needs to be added to the database
        required: true
        schema:
          type: object
          properties:
            Event_name:
              type: string
            Address:
              type: string
              example: 50 W 43rd Street
            Longitude:
              type: number
              format: double
              example: 40.76096
            Latitude:
              type: number
              format: double
              example: -73.996697
            Time:
              type: string
              format: date-time
            Description:
              type: string
            Image:
              type: string
      responses:
        400:
          description: Bad request
  /event/{id}:
    get:
      tags:
      - event
      summary: Get event details by ID
      description: Returns a single event
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of event to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Event'
        400:
          description: Invalid ID supplied
    post:
      tags:
      - event
      summary: Updates an event with type and value
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: ID of event that needs to be updated
        required: true
        type: integer
        format: int64
      - name: Type
        in: formData
        description: Type of data to update for the event (time / address / description)
        required: true
        type: string
      - name: Time
        in: formData
        description: required for update event time
        required: false
        type: string
      - name: Address
        in: formData
        description: required for update event address
        required: false
        type: string
      - name: Longitude
        in: formData
        description: required for update event address
        required: false
        type: string
      - name: Latitude
        in: formData
        description: required for update event address
        required: false
        type: string
      - name: Description
        in: formData
        description: required for update event description
        required: false
        type: string
      responses:
        400:
          description: Bad request
    delete:
      tags:
      - event
      summary: Deletes an event
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Event id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
  /event/{id}/attendees:
    get:
      tags:
      - event
      summary: Get event attendees
      description: Get the list of attendees of an event
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of event
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
             properties:
              name:
                type: string
              email:
                type: string
                format: email
        400:
          description: Invalid ID supplied
  
  /events/liked:
    get:
      tags:
      - events
      summary: Get the list of events user liked
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        400:
          description: Bad request
  /events/history:
    get:
      tags:
      - events
      summary: Get the list of history events user joined
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        400:
          description: Bad request
  /events/ongoing:
    get:
      tags:
      - events
      summary: Get the list of ongoing events
      description: Get the list the events the user is going to attend
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        400:
          description: Bad request
  /events/nearby:
    get:
      tags:
      - events
      summary: Get the list of nearby events
      description: Get the list of the events near the user
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: latitude
        in: formData
        description: latitude
        required: true
        type: number
        format: double
      - name: longitude
        in: formData
        description: longitude
        required: true
        type: number
        format: double
      - name: radius
        in: formData
        description: radius
        required: true
        type: number
        format: double
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        400:
          description: Bad request
  /user/info:
    get:
      tags:
      - user
      summary: Get user info
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request
  /user/event/{id}/join:
    post:
      tags:
      - user
      summary: User joins an event
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: The id of the event
        required: true
        type: string
      - name: join
        in: formData
        description: whether the user joins / cancel the event
        required: true
        type: boolean
      responses:
        200:
          description: successful operation
        400:
          description: Bad request
  /user/event/{id}/like:
    post:
      tags:
      - user
      summary: User likes an event
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: The id of the event
        required: true
        type: string
      - name: like
        in: formData
        description: whether the user likes / cancel like the event
        required: true
        type: boolean
      responses:
        200:
          description: successful operation
        400:
          description: Bad request
  /user/event/{id}/comment:
    post:
      tags:
      - user
      summary: User comments an event
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: The id of the event
        required: true
        type: string
      - name: Time
        in: formData
        description: the time when user comments
        required: true
        type: string
        format: date-time
      - name: Content
        in: formData
        description: the comment content
        required: true
        type: string
      responses:
        200:
          description: successful operation
        400:
          description: Bad request          
definitions:
  User:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      picture:
        type: string
    xml:
      name: User
  Event:
    type: object
    required:
    - id
    - name
    - host
    - address
    - longitude
    - latitude
    - time
    - description
    - image
    - num_likes
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      host:
        type: string
        format: email
      address:
        type: string
        example: 50 W 43rd Street
      longitude:
        type: number
        format: double
        example: 40.76096
      latitude:
        type: number
        format: double
        example: -73.996697
      time:
        type: string
        format: date-time
      description:
        type: string
      image:
        type: string
      num_likes:
        type: integer
        format: int64
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'
    xml:
      name: Event
  Comment:
    type: object
    properties:
      user:
        type: string
        format: email
      content:
        type: string
      time:
        type: string
        format: date-time
    xml:
      name: User
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /yesOK/YesOK/1.0.0
schemes:
 - https
 - http